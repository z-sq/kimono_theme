<?php

/**
 * @file
 * Theme and preprocess functions for pages.
 */

use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements theme_preprocess_page().
 */
function kimono_theme_preprocess_page(&$variables) {
  // Add the site name to the page.
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
}

/**
 * Implements hook_theme_suggestions_hook_alter().
 */
function radix_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $route_matcher = \Drupal::routeMatch();

  // * Add a template suggestions for node type.
  /** @var \Drupal\node\NodeInterface $node */
  if ($node = $route_matcher->getParameter('node')) {
    if (is_numeric($node)) {
      $node = Node::load($node);
    }

    $suggestions[] = 'page__node__' . $node->bundle();
  }

  $current_path = \Drupal::service('path.current')->getPath();
  $result = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  $path_alias = trim($result, '/');
  $path_alias = str_replace('/', '-', $path_alias);
  $path_alias = str_replace('-', '_', $path_alias);

  $suggestions[] = 'page__path__' . $path_alias;

  // * Defines custom theme suggestions based on the route.
  $route_name = \Drupal::request()->attributes->get('_route');
  if ('system.404' === $route_name) {
    $suggestions[] = 'page__404';
  }
  elseif ('system.403' === $route_name) {
    $suggestions[] = 'page__403';
  }

  // * Add view mode theme suggestions based on the vocabulary
  if ($route_matcher->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = $route_matcher->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $suggestions[] = 'page__taxonomy__' . $term->bundle();
  }
}
