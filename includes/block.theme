<?php

/**
 * @file
 * Theme and preprocess functions for block.
 */

use Drupal\Core\Render\Element;
use Drupal\block_content\BlockContentInterface;
use Drupal\language\Entity\ConfigurableLanguage;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function radix_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $suggestions_new = [];
  $content = $variables['elements']['content'];

  $block_content = $variables['elements']['content']['#block_content'] ?? NULL;

  if ($block_content instanceof BlockContentInterface) {
    $bundle = $content['#block_content']->bundle();
    $view_mode = strtr($variables['elements']['#configuration']['view_mode'], '.', '_');

    $suggestions_new[] = 'block__block_content__view__' . $view_mode;
    $suggestions_new[] = 'block__block_content__type__' . $bundle;
    $suggestions_new[] = 'block__block_content__view_type__' . $bundle . '__' . $view_mode;

    if (!empty($variables['elements']['#id'])) {
      $suggestions_new[] = 'block__block_content__id__' . $variables['elements']['#id'];
      $suggestions_new[] = 'block__block_content__id_view__' . $variables['elements']['#id'] . '__' . $view_mode;
    }

    $suggestions = array_unique($suggestions);
    array_splice($suggestions, 1, 0, $suggestions_new);
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_block().
 */
function radix_preprocess_block(&$variables) {
  // Add id to template.
  if (isset($variables['elements']['#id'])) {
    $variables['id'] = str_replace('_', '-', $variables['elements']['#id']);
  }

  // Check for BlockContent.
  if ($variables['elements']['#configuration']['provider'] != 'block_content' || empty($variables['elements']['content']['#block_content'])) {
    return;
  }

  // Get the block bundle.
  $block_content = $variables['elements']['content']['#block_content'];

  // Add bundle to template.
  $variables['bundle'] = $block_content->bundle();

  // Add custom attribute class for block.
  if ($variables['elements']['#base_plugin_id'] == 'block_content') {
    $blockType = strtr($variables['bundle'], '_', '-');
    $variables['attributes']['class'][] = 'block--type-' . $blockType;
  }
}

/**
 * Implements template_preprocess_block_content().
 */
function radix_preprocess_block_content(&$variables) {
  // Helpful $content variable for templates.
  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}


function kimono_theme_preprocess_links__language_block(&$variables) {
  // 获取当前语言对象
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $langcode = $language->getId();

  // 获取语言配置实体
  $configurable_language = ConfigurableLanguage::load($langcode);
  $custom_name = $configurable_language ? $configurable_language->label() : $language->getName();

  // 注入到模板变量
  $variables['language'] = $language;
  $variables['current_language_name'] = $custom_name;
}
